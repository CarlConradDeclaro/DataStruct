 
public class Main
{
    Node head;
    
    class Node{
        int data;
        Node next;
        
          Node(int data){
            this.data = data;
            next =  null;
        }
    }
    //How to Insert a Node at the Front/Beginning of Linked List
    public void push(int newData){
        Node node = new Node(newData);
        node.next = head;
        head = node;
    }
    
    //How to Insert a Node at the End of Linked List
    public void append(int newData){
        
        Node newNode =  new Node(newData);
        
        if(head == null){
            head = newNode;
            
        }
        
        Node current = head;
        while(current.next != null){
            current = current.next;
        }
        
        current.next = newNode;
        
    }
    
    //Search an element in a Linked List
    public void searcNode(int data){
        
        Node current =  head;
        
        while(current.next != null){
            if(current.data  == data){
                 System.out.println("Present  "  );
                  return;
            }
            current = current.next;
        }
        
        if(current.data  != data){
                 System.out.println("not present");
        }
     }
     
  //  Reverse a Linked List
 
     public Node reverse(){
         if(head == null){
             return head;
         }
         
         Node current =  head;
         Node previous = null;
         Node next  =  null;
         
         while(current != null){
             next = current.next;
              current.next = previous;
              previous = current;
              current = next;
         }
         
         return previous;
         
     }
     //Reverse a Linked List
       void printList(Node node){
        while (node != null) {
            System.out.print(node.data + " ");
            node = node.next;
        }
    }
     
    
    
   int length =0; //Find Length of a Linked List
    public void print(){
        Node current = head;
        
        while(current!= null){
            System.out.print(current.data+ " ");
            current = current.next;
            length++;
            
        }
    }
    
    void length(){
        System.out.println(length);
    }
        
        
    
	public static void main(String[] args) {
	 Main node =  new Main();
	 
	 node.push(6);
	 node.push(5);
	 node.push(4);
	 node.push(3);
	 node.push(2);
	 node.push(1);
	 node.append(90);
	 node.append(80);
	 node.push(100);
	 
	 
	 node.print();
 
	 node.searcNode(5);
	 node.length();
 
 
    //Reverse a Linked List
    System.out.println("reverse");
    Node reverseList =   node.reverse();
	node.printList(reverseList);
	
	
	}
}

